type: "remap"
inputs:
  - transform_docker_router.nginx_http_logs
  - transform_docker_router.nginx_https_logs
source: |
  del(.source_type)
  .dt = del(.timestamp)
  .nginx = parse_regex(.message, r'^\s*(-|(?P<client>\S+))\s+\-\s+(-|(?P<user>\S+))\s+\[(?P<timestamp>.+)\]\s+"(?P<request>(?P<method>\w+)\s+(?P<path>\S+)\s+(?P<protocol>\S+))"\s+(?P<status>\d+)\s+(?P<size>\d+)\s+"(-|(?P<referrer>.+))"\s+"(-|(?P<agent>.+))"\s*') ??
      parse_regex(.message, r'^\s*(?P<timestamp>.+)\s+\[(?P<severity>\w+)\]\s+(?P<pid>\d+)\#(?P<tid>\d+):\s+\*(?P<cid>\d+)\s+(?P<message>.*)(?:,\s+client:\s+(?P<client>[^,z]+))(?:,\s+server:\s+(?P<server>[^,z]+))(?:,\s+request:\s+"(?P<request>[^"]+)")(?:,\s+subrequest:\s+"(?P<subrequest>[^"]+)")?(?:,\s+upstream:\s+"(?P<upstream>[^"]+)")?(?:,\s+host:\s+"(?P<host>[^"]+)")(?:,\s+referrer:\s+"(?P<referrer>[^"]+)")?\s*') ??
      parse_nginx_log(.message, format: "combined") ??
      parse_nginx_log(.message, format: "error") ??
      {}

  if .nginx != {} {
    .platform = "Nginx"
    .level = del(.nginx.severity)
    .message = del(.nginx.message)

    if is_null(.message) { del(.message) }
    if exists(.nginx.timestamp) {
      .dt = format_timestamp!(
        parse_timestamp(.nginx.timestamp, "%d/%b/%Y:%T %z") ??
          parse_timestamp(.nginx.timestamp, "%Y/%m/%d %T") ??
          .dt,
        "%+"
      )

      del(.nginx.timestamp)
    }

    if is_string(.nginx.status) { .nginx.status = to_int(.nginx.status) ?? .nginx.status }
    if is_string(.nginx.size) { .nginx.size = to_int(.nginx.size) ?? .nginx.size }
    if is_string(.nginx.cid) { .nginx.cid = to_int(.nginx.cid) ?? .nginx.cid }
    if is_string(.nginx.pid) { .nginx.pid = to_int(.nginx.pid) ?? .nginx.pid }
    if is_string(.nginx.tid) { .nginx.tid = to_int(.nginx.tid) ?? .nginx.tid }

    if is_null(.nginx.subrequest) { del(.nginx.subrequest) }
    if is_null(.nginx.upstream) { del(.nginx.upstream) }
    if is_null(.nginx.referrer) { del(.nginx.referrer) }
  } else {
    del(.nginx)
  }
