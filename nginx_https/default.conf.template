proxy_cache_path /nginx-imgproxy-cache levels=1:2 keys_zone=imgproxy_cache:40m max_size=40g inactive=180d use_temp_path=off;
resolver 127.0.0.11 valid=30s;



server {
    # This server is used to expose the nginx status page.
    # Port 80 should not be exposed on the host, it will be
    # only accessed by the vector container.
    server_name _;
    listen 80;

    location /nginx_status {
        stub_status on;
        access_log off;
    }
}

server {
   server_name ${NGINX_HTTPS_SERVER_NAME};
   client_max_body_size 10M;

   # HTTPS only. HTTP is handled by hte nginx-http container
   listen 443 ssl;

   ssl_certificate /etc/letsencrypt/live/${NGINX_HTTPS_SERVER_NAME}/fullchain.pem;
   ssl_certificate_key /etc/letsencrypt/live/${NGINX_HTTPS_SERVER_NAME}/privkey.pem;


   # From https://ssl-config.mozilla.org/
   ssl_session_timeout 1d;
   ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
   ssl_session_tickets off;

   # intermediate configuration
   ssl_protocols TLSv1.2 TLSv1.3;
   ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
   ssl_prefer_server_ciphers off;

  
# HTTPS configuration
    location / { proxy_pass http://127.0.0.1:8000; }
#   location /oauth   { proxy_pass http://127.0.0.1:8001; }
#   location /lang   { proxy_pass http://127.0.0.1:8002/; }
    location /upload { proxy_pass http://127.0.0.1:8003; }


    location /ip/ {
                # This is a trick to resolve the service name after nginx has started.
                # Nginx would fail during startup if we just do `proxy_pass http://imgproxy:8080`
                # and imgproxy does not resolve.
                set $target_service http://imgproxy:8080;
                proxy_pass $target_service;
                proxy_cache imgproxy_cache;
                proxy_cache_valid 200 180d;
    }
}
