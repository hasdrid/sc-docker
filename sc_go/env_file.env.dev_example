# This only affects CORS.
PRODUCTION=false

GITHUB_ACTIONS=false
MOCK_REDIS=false
RUN_MIGRATIONS=false

# Local pgvector based prompt embedding NSFW filter. We are not using it.
ENABLE_BANNED_PROMPTS=false

# Use OpenAI Moderation endpoint to check prompts for nsfw/nsfw+minor content
ENABLE_OPENAI_MODERATION=true
# XXX Put your OpenAI key here. It needs to be an account with payment history, a fresh accounts key won't work.
OPENAI_API_KEY=sk-xxx

# Prompt translation is fiddly, don't enable it.
ENABLE_TRANSLATION=false

# Where do we store the generations
# R2 (Cloudflare)

# BUCKET_BASE_URL=https://976a6f14de4e0ffce88628ffbb1d7637.r2.cloudflarestorage.com/bc8-gen-na-east
# BUCKET_VOICEOVER_URL=https://976a6f14de4e0ffce88628ffbb1d7637.r2.cloudflarestorage.com/bc8-gen-na-east

# Or s3
BUCKET_BASE_URL=https://stablecog.s3.eu-north-1.amazonaws.com/stablecog/
BUCKET_VOICEOVER_URL=https://stablecog.s3.eu-north-1.amazonaws.com/stablecog/

# Don't think this is being used
# DISCORD_BOT_TOKEN=xxx
# DISCORD_WEBHOOK_URL=https://discordapp.com/api/webhooks/xxx
# DISCORD_WEBHOOK_URL_DEPLOY=https://discordapp.com/api/webhooks/xxx
# DISCORD_WEBHOOK_URL_NEWSUB=https://discordapp.com/api/webhooks/xxx
# GEOIP_WEBHOOK=https://discordapp.com/api/webhooks/xxx

PUBLIC_SUPABASE_REFERENCE_ID=xx
SUPABASE_ADMIN_KEY=xxx

# This is only needed for self-hosted supabase.
# GOTRUE_URL=https://ripcxiducccfionzyaqr.supabase.co/auth/v1

POSTGRES_DB=postgres
POSTGRES_HOST=aws-0-us-east-1.pooler.supabase.com
POSTGRES_PORT=5432
POSTGRES_PASSWORD=xxx
POSTGRES_USER=postgres.xxx


POSTHOG_API_KEY=phc_xxx
POSTHOG_ENDPOINT=https://app.posthog.com


# Locally ran services
# Qdrant is am embedding database. It's used to find "similar" images/prompts.
QDRANT_COLLECTION_NAME=sc-qdrant
QDRANT_URL=http://qdrant:6333/

# I think redis is used to cache user-related stuff from Postgres/Supabase.
REDIS_CONNECTION_STRING=redis://redis:6379

# RabbitMQ is used to send work to workers (that are doing the image generation)
# Hint: Use the public https url of the rabbitmq instance.
RABBITMQ_AMQP_URL=xxx
RABBITMQ_QUEUE_NAME=dev

# THe url that will be used for webhook. This should point to this server!
PUBLIC_API_URL=https://dev.api.bc8.ai
# The worker is going to report progress via our webhook. It will have to use this secret.
SC_WORKER_WEBHOOK_SECRET=xxx


# comma-separated list of URLs. ClipAPI gives us model-independent prompt embeddings.
CLIPAPI_URLS=http://sc_worker/clip/embed
CLIPAPI_ENDPOINT=http://sc_worker/
CLIPAPI_SECRET="Bearer xxx"


# DATA_ENCRYPTION_PASSWORD=insecurePassword

S3_ACCESS_KEY=xxx
S3_BUCKET_NAME=stablecog
S3_ENDPOINT=https://s3.eu-north-1.amazonaws.com
S3_REGION=eu-north-1
S3_SECRET_KEY=xxx

S3_IMG2IMG_ACCESS_KEY=xxx
S3_IMG2IMG_BUCKET_NAME=img2imgx
S3_IMG2IMG_ENDPOINT=https://s3.us-east-1.amazonaws.com/
S3_IMG2IMG_REGION=us-east-1
S3_IMG2IMG_SECRET_KEY=xxx


# We need to get rid of the stripe dependency.
STRIPE_ENDPOINT_SECRET=xxx
STRIPE_LARGE_PACK_PRICE_ID=1
STRIPE_LARGE_PACK_PRODUCT_ID=1
STRIPE_MEDIUM_PACK_PRICE_ID=2
STRIPE_MEDIUM_PACK_PRODUCT_ID=2
STRIPE_MEGA_PACK_PRICE_ID=3
STRIPE_MEGA_PACK_PRODUCT_ID=3
STRIPE_PRO_PRICE_ID=price_1Mf50bATa0ehBYTAPOcfnOjG
STRIPE_PRO_PRODUCT_ID=prod_NTzCojAHPw6tbX
STRIPE_SECRET_KEY=sk_live_xxx
STRIPE_STARTER_PRICE_ID=price_1Mf56NATa0ehBYTAHkCUablG
STRIPE_STARTER_PRODUCT_ID=prod_NPuwbni7ZNkHDO
STRIPE_ULTIMATE_PRICE_ID=price_1Mf591ATa0ehBYTA6ggpEEkA
STRIPE_ULTIMATE_PRODUCT_ID=prod_NTzE0C8bEuIv6F
